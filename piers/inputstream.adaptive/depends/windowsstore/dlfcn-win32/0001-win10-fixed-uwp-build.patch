From f85366b1044fff7b4ea9162c3edcd8278c3e06ff Mon Sep 17 00:00:00 2001
From: Alwin Esch <alwin.esch@web.de>
Date: Thu, 22 Aug 2019 19:30:12 +0100
Subject: [PATCH] [win10] fixed uwp build

---

diff --git a/src/dlfcn.c b/src/dlfcn.c
index cb9f9bb..b26b404 100644
--- a/src/dlfcn.c
+++ b/src/dlfcn.c
@@ -24,6 +24,7 @@
  * THE SOFTWARE.
  */
 
+#define _CRT_SECURE_NO_WARNINGS
 #ifdef _DEBUG
 #define _CRTDBG_MAP_ALLOC
 #include <stdlib.h>
@@ -311,6 +312,7 @@ static HMODULE MyGetModuleHandleFromAddress( const void *addr )
 /* Load Psapi.dll at runtime, this avoids linking caveat */
 static BOOL MyEnumProcessModules( HANDLE hProcess, HMODULE *lphModule, DWORD cb, LPDWORD lpcbNeeded )
 {
+#if !defined(WINAPI_FAMILY) || (WINAPI_FAMILY != WINAPI_FAMILY_APP)
     static BOOL (WINAPI *EnumProcessModulesPtr)(HANDLE, HMODULE *, DWORD, LPDWORD) = NULL;
     static BOOL failed = FALSE;
     UINT uMode;
@@ -349,21 +351,27 @@ static BOOL MyEnumProcessModules( HANDLE hProcess, HMODULE *lphModule, DWORD cb,
     }
 
     return EnumProcessModulesPtr( hProcess, lphModule, cb, lpcbNeeded );
+#else
+    return 0;
+#endif
 }
 
 DLFCN_EXPORT
 void *dlopen( const char *file, int mode )
 {
-    HMODULE hModule;
-    UINT uMode;
+    HMODULE hModule = NULL;
+    UINT uMode = 0;
 
     error_occurred = FALSE;
 
     /* Do not let Windows display the critical-error-handler message box */
+#if !defined(WINAPI_FAMILY) || (WINAPI_FAMILY != WINAPI_FAMILY_APP)
     uMode = MySetErrorMode( SEM_FAILCRITICALERRORS );
+#endif
 
     if( file == NULL )
     {
+#if !defined(WINAPI_FAMILY) || (WINAPI_FAMILY != WINAPI_FAMILY_APP) // what is replacement of GMH on UWP?
         /* POSIX says that if the value of file is NULL, a handle on a global
          * symbol object must be provided. That object must be able to access
          * all symbols from the original program file, and any objects loaded
@@ -378,6 +386,7 @@ void *dlopen( const char *file, int mode )
 
         if( !hModule )
             save_err_str( "(null)", GetLastError( ) );
+#endif
     }
     else
     {
@@ -415,6 +424,23 @@ void *dlopen( const char *file, int mode )
              * to UNIX's search paths (start with system folders instead of current
              * folder).
              */
+#if defined(WINAPI_FAMILY) && (WINAPI_FAMILY == WINAPI_FAMILY_APP)
+            int result = MultiByteToWideChar(CP_UTF8, MB_ERR_INVALID_CHARS, lpFileName, strlen(lpFileName), NULL, 0);
+            if (result == 0)
+                return NULL;
+
+            wchar_t* newStr = (wchar_t*)malloc(result*sizeof(wchar_t));
+            result = MultiByteToWideChar( CP_UTF8, MB_ERR_INVALID_CHARS, lpFileName, strlen(lpFileName), newStr, result );
+            if (result == 0)
+            {
+                free( newStr );
+                return NULL;
+            }
+
+            hModule = LoadPackagedLibrary( newStr, 0 );
+            free( newStr );
+            dwProcModsAfter = 0;
+#else // WINAPI_PARTITION_DESKTOP
             hModule = LoadLibraryExA( lpFileName, NULL, LOAD_WITH_ALTERED_SEARCH_PATH );
 
             if( !hModule )
@@ -449,11 +475,14 @@ void *dlopen( const char *file, int mode )
                     local_rem( hModule );
                 }
             }
+#endif
         }
     }
 
     /* Return to previous state of the error-mode bit flags. */
+#if !defined(WINAPI_FAMILY) || (WINAPI_FAMILY != WINAPI_FAMILY_APP)
     MySetErrorMode( uMode );
+#endif
 
     return (void *) hModule;
 }
@@ -488,15 +517,16 @@ void *dlsym( void *handle, const char *name )
 {
     FARPROC symbol;
     HMODULE hCaller;
-    HMODULE hModule;
+    HMODULE hModule = 0;
     DWORD dwMessageId;
 
     error_occurred = FALSE;
 
     symbol = NULL;
+    dwMessageId = 0;
     hCaller = NULL;
+#if !defined(WINAPI_FAMILY) || (WINAPI_FAMILY != WINAPI_FAMILY_APP) // what is replacement of GMH on UWP?
     hModule = GetModuleHandle( NULL );
-    dwMessageId = 0;
 
     if( handle == RTLD_DEFAULT )
     {
@@ -525,6 +555,7 @@ void *dlsym( void *handle, const char *name )
             goto end;
         }
     }
+#endif
 
     if( handle != RTLD_NEXT )
     {
@@ -537,7 +568,7 @@ void *dlsym( void *handle, const char *name )
     /* If the handle for the original program file is passed, also search
      * in all globally loaded objects.
      */
-
+#if !defined(WINAPI_FAMILY) || (WINAPI_FAMILY != WINAPI_FAMILY_APP)
     if( hModule == handle || handle == RTLD_NEXT )
     {
         HANDLE hCurrentProc;
@@ -588,6 +619,7 @@ void *dlsym( void *handle, const char *name )
             }
         }
     }
+#endif
 
 end:
     if( symbol == NULL )
